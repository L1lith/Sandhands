(window.webpackJsonp=window.webpackJsonp||[]).push([["3d70"],{WGu9:function(e,a,t){"use strict";t.r(a);var n=t("0iUn"),s=t("sLSF"),l=t("MI3g"),i=t("a7VT"),r=t("Tit0"),c=t("q1tI"),o=t.n(c),m=t("xj1T"),d=t.n(m),u=(t("8UQz"),function(e){function a(){return Object(n.default)(this,a),Object(l.default)(this,Object(i.default)(a).apply(this,arguments))}return Object(r.default)(a,e),Object(s.default)(a,[{key:"render",value:function(){return o.a.createElement("div",{className:"format"},o.a.createElement("h1",{className:"pagetitle"},"Format"),o.a.createElement("p",{className:"description"},"This section describes the format (the sanitation schema) we give to Sandhands to define how it should sanitize the input."),o.a.createElement("div",{id:"primitives",className:"primitives section"},o.a.createElement("h2",{className:"name"},"Primitives Basics"),o.a.createElement("p",{className:"description"},"Null and undefined can be passed in as is, and it will expect strict equality."),o.a.createElement(d.a,{className:"javascript"},"const {valid} = require('sandhands')\n\nvalid('', null) // false\nvalid(undefined, null) // false\nvalid(null, null) // true\n\nvalid('', undefined) // false\nvalid(null, undefined) // false\nvalid(undefined, undefined) // true"),o.a.createElement("p",{className:"description"},"Numbers, Strings, and Booleans can be passed in by using their class names."),o.a.createElement(d.a,{className:"javascript"},"const {valid} = require('sandhands')\n\nvalid(12, String) // false\nvalid(String, String) // false\nvalid('hello world', String) // true\n\nvalid('ganondorf', Number) // false\nvalid(Number, Number) // false\nvalid(42, Number) // true")),o.a.createElement("div",{id:"options",className:"options section"},o.a.createElement("h2",{className:"name"},"Options"),o.a.createElement("p",{className:"description"},"All data types have a set of default options which accompany them. We can override the defaults with our own arguments two different ways",o.a.createElement("br",null),"The first way is we can pass the options as the third argument after the format to the method."),o.a.createElement(d.a,{className:"javascript"},"const {valid} = require('sandhands')\n\nconsole.log(valid('hello', String, {minLength: 8})) // false\nconsole.log(valid('hello world', String, {minLength: 8})) // true"),o.a.createElement("p",{className:"description"},"The second way to pass options is inside the format itself. We use a special object syntax to designate this:"),o.a.createElement(d.a,{className:"javascript"},'const {valid} = require(\'sandhands\')\n\nconsole.log(valid("Lily", {_: String, lowercase: true})) // false\nconsole.log(valid("lily", {_: String, lowercase: true})) // true')),o.a.createElement("div",{id:"strings",className:"strings section"},o.a.createElement("h2",{className:"name"},"Strings"),o.a.createElement("p",{className:"description"},"The following options are available for strings:"),o.a.createElement("div",{className:"option"},o.a.createElement("h3",{className:"name"},"email"),o.a.createElement("p",{className:"description"},"Flag as true to required the string be a valid email.")),o.a.createElement("div",{className:"option"},o.a.createElement("h3",{className:"name"},"lowercase"),o.a.createElement("p",{className:"description"},"Flag as true to required the string be lowercase.")),o.a.createElement("div",{className:"option"},o.a.createElement("h3",{className:"name"},"uppercase"),o.a.createElement("p",{className:"description"},"Flag as true to required the string be uppercase.")),o.a.createElement("div",{className:"option"},o.a.createElement("h3",{className:"name"},"minLength"),o.a.createElement("p",{className:"description"},"Set the minimum required length of the string. Default: 1")),o.a.createElement("div",{className:"option"},o.a.createElement("h3",{className:"name"},"maxLength"),o.a.createElement("p",{className:"description"},"Set the maximum required length of the string.")),o.a.createElement("div",{className:"option"},o.a.createElement("h3",{className:"name"},"length"),o.a.createElement("p",{className:"description"},"Set the exact required length of the string.")),o.a.createElement("div",{className:"option"},o.a.createElement("h3",{className:"name"},"allowed"),o.a.createElement("p",{className:"description"},"Set a string to whitelist the input string.")),o.a.createElement("div",{className:"option"},o.a.createElement("h3",{className:"name"},"banned"),o.a.createElement("p",{className:"description"},"Set a string to blacklist the input string.")),o.a.createElement("div",{className:"option"},o.a.createElement("h3",{className:"name"},"whitespace"),o.a.createElement("p",{className:"description"},"Flag as false to require the string to contain no whitespaces.")),o.a.createElement("div",{className:"option"},o.a.createElement("h3",{className:"name"},"regex"),o.a.createElement("p",{className:"description"},"Set a regular expression to test the input string.")),o.a.createElement("div",{className:"option"},o.a.createElement("h3",{className:"name"},"trimmed"),o.a.createElement("p",{className:"description"},"Flag as true to require the string to not begin or end with whitespace."))),o.a.createElement("div",{id:"numbers",className:"numbers section"},o.a.createElement("h2",{className:"name"},"Numbers"),o.a.createElement("div",{className:"option"},o.a.createElement("h3",{className:"name"},"integer"),o.a.createElement("p",{className:"description"},"Flag as true to require whole numbers. Default: false")),o.a.createElement("div",{className:"option"},o.a.createElement("h3",{className:"name"},"allowNaN"),o.a.createElement("p",{className:"description"},"Flag as true to allow NaN. Default: false")),o.a.createElement("div",{className:"option"},o.a.createElement("h3",{className:"name"},"finite"),o.a.createElement("p",{className:"description"},"Flag as false to allow Infinity. Default: true")),o.a.createElement("div",{className:"option"},o.a.createElement("h3",{className:"name"},"min"),o.a.createElement("p",{className:"description"},"Set the minimum value of the input")),o.a.createElement("div",{className:"option"},o.a.createElement("h3",{className:"name"},"max"),o.a.createElement("p",{className:"description"},"Set the maximum value of the input")),o.a.createElement("div",{className:"option"},o.a.createElement("h3",{className:"name"},"even"),o.a.createElement("p",{className:"description"},"Flag as true to require even numbers.")),o.a.createElement("div",{className:"option"},o.a.createElement("h3",{className:"name"},"odd"),o.a.createElement("p",{className:"description"},"Flag as true to require odd numbers."))),o.a.createElement("div",{id:"objects",className:"object section"},o.a.createElement("h2",{className:"name"},"Objects"),o.a.createElement("p",{className:"description"},"We can sanitize objects by creating our own object representing how we expect the input to be formatted."),o.a.createElement("div",{className:"option"},o.a.createElement("h3",{className:"name"},"strict"),o.a.createElement("p",{className:"description"},"Flag as true to require all input values to be defined by the format in order to be valid. Default: true")),o.a.createElement("div",{className:"option"},o.a.createElement("h3",{className:"name"},"optional"),o.a.createElement("p",{className:"description"},"Flag as true on a property to make that property not required (if the input has the property the format for that property is applied)")),o.a.createElement(d.a,{className:"javascript"},"const {valid} = require('sandhands')\n\nconsole.log(valid({}, {})) // true\nconsole.log(valid({}, {a: String})) // false\nconsole.log(valid({a: 'hello world'}, {a: String})) // true\nconsole.log(valid({}, {a: {_: String, optional: true}})) // true\nconsole.log(valid({b: 12}, {})) // false\nconsole.log(valid({b: 12}, {}, {strict: false})) // true")),o.a.createElement("div",{id:"arrays",className:"array section"},o.a.createElement("h2",{className:"name"},"Arrays"),o.a.createElement("p",{className:"description"},"We can sanitize arrays by creating our own array representing how we expect the input to be formatted. The default array behavior might seem confusing at first, however once you understand it in practice it is simple and expressive."),o.a.createElement("div",{className:"option"},o.a.createElement("h3",{className:"name"},"standard"),o.a.createElement("p",{className:"description"},"Manually set the standard to use for all array values")),o.a.createElement("div",{className:"option"},o.a.createElement("h3",{className:"name"},"firstAsStandard"),o.a.createElement("p",{className:"description"},"Flag as true to splice the first element of the format array and use it to validate all values of the input array that are not explicitly defined by the format array. The values of all of the format array are all shifted to the left by one index. Default: true if the array length is equal to 1")),o.a.createElement("div",{className:"option"},o.a.createElement("h3",{className:"name"},"strict"),o.a.createElement("p",{className:"description"},"Flag as true to require all array indexs to be defined by the format in order to be valid. Default: true if the format length is at least 1")),o.a.createElement("div",{className:"option"},o.a.createElement("h3",{className:"name"},"minLength"),o.a.createElement("p",{className:"description"},"Set the minimum required length of the array. Default: 1 unless the format array is empty and there is no standard.")),o.a.createElement("div",{className:"option"},o.a.createElement("h3",{className:"name"},"maxLength"),o.a.createElement("p",{className:"description"},"Set the maximum length of the array.")),o.a.createElement("div",{className:"option"},o.a.createElement("h3",{className:"name"},"length"),o.a.createElement("p",{className:"description"},"Set the exact required length of the array.")),o.a.createElement(d.a,{className:"javascript"},"const {valid} = require('sandhands')\n\nconsole.log(valid([], [])) // true\nconsole.log(valid([], [Number])) // true - Because the format array is only one element long the first value is set as the firstAsStandard format, and strict is not assumed to be true.\nconsole.log(valid([12], [Number])) // true\nconsole.log(valid([54, 25], [Number])) // true - As you can see\nconsole.log(valid([12, 12], [Number, Number])) // true - Because the format array is longer than one element firstAsStandard is not assumed and strict is set to true.\n\nconsole.log(valid([52, 63, 14], [Number, Number])) // false - Because strict is assumed extra array elements will cause validation to fail.\n\nconsole.log(valid(['a', 15, 25], {_:[Number, String], firstAsStandard: true})) // true - We can also use firstAsStandard alongside with specific formats for certain array indexes by setting it explicitly in the inline options. The first index (Number) will be the standard format for all indexes, and the second index will now become the beginning of the array of custom formats for specific indexes, meaning the first array index will be expected to be a string, and all following indexes will be expected to be numbers.")),o.a.createElement("div",{id:"universal",className:"universal section"},o.a.createElement("h2",{className:"name"},"Universal Options"),o.a.createElement("div",{className:"option"},o.a.createElement("h3",{className:"name"},"validate"),o.a.createElement("p",{className:"description"},"Expects a function or array of functions to compare the input with. If any don't return true, reject the input.")),o.a.createElement("div",{className:"option"},o.a.createElement("h3",{className:"name"},"equalTo"),o.a.createElement("p",{className:"description"},"Expects the input to be strictly equal (using the === operator) to the value of the equalTo option."))),o.a.createElement("div",{className:"numbers section"},o.a.createElement("h2",{className:"name"},"All"),o.a.createElement("p",{className:"description"},"The All format is a special class we can import that acts as a wildcard. Please be careful with this as any kind of dangerous input could be passed. Please only use this if you know what you are doing."),o.a.createElement(d.a,{className:"javascript"},"const {valid, All} = require('sandhands')\n\nconsole.log(valid(\"Hello :)\", All)) // true\nconsole.log(valid(Infinity, All)) // true\nconsole.log(valid({a: 'hello world', b: 12}, {a: String, b: All})) // true")))}}]),a}(c.Component));a.default=u},aNxC:function(e,a,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/format",function(){var e=t("WGu9");return{page:e.default||e}}])}},[["aNxC","5d41","9da1","ad9d"]]]);